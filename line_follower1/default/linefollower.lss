
linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000dc  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006e  00000000  00000000  00000351  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000161  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a2  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>       // include avr header file
#include <util/delay.h>   // include delay header file


int main(void)  		  // main function
{
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
DDRA=0b00000000;          // declare PortA as a input port connected to the sensors
  a0:	1a ba       	out	0x1a, r1	; 26
DDRB=0b00001111;          // declare PortB as a output port connected to the motors
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	87 bb       	out	0x17, r24	; 23
		PORTB=0b00000001;
		tp=1; // turn left
        }
	else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b01000000) && (right_sensor==0b00000000) && (ms==0b00000000)) 	// if left sensor off but right sensor on
        {
		PORTB=0b00000001;
  a6:	01 e0       	ldi	r16, 0x01	; 1
		PORTB=0b00000000;   // stop	
		}

    else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00100000))     // if both sensors "on"
		{
        PORTB=0b00001001;  // move straight
  a8:	29 e0       	ldi	r18, 0x09	; 9
  aa:	d2 2e       	mov	r13, r18
		{
		PORTB=0b00001010;   // stop	
		}
		else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00000000) && (tp==1))     // if both sensors "off"
		{
		PORTB=0b00000101;   // stop	
  ac:	95 e0       	ldi	r25, 0x05	; 5
  ae:	e9 2e       	mov	r14, r25


	 
	if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00000000) && (tp==2))     // if both sensors "off"
		{
		PORTB=0b00001010;   // stop	
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	f8 2e       	mov	r15, r24
		tp=2;  //TURN RYT
		} 
	
	else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00010000) && (ms==0b00100000))
		{
		PORTB=0b00001000;
  b4:	18 e0       	ldi	r17, 0x08	; 8

int s4,s5,left_sensor=0, right_sensor=0,ms=0,tp;

while(1)
{ // infinite loop
	s5=PINA&0b10000000;
  b6:	29 b3       	in	r18, 0x19	; 25
  b8:	30 e0       	ldi	r19, 0x00	; 0
	left_sensor=PINA&0b01000000;    // mask PA4 bit of Port A
  ba:	89 b3       	in	r24, 0x19	; 25
  bc:	e8 2f       	mov	r30, r24
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	e0 74       	andi	r30, 0x40	; 64
  c2:	f0 70       	andi	r31, 0x00	; 0
	right_sensor=PINA&0b00010000;
  c4:	89 b3       	in	r24, 0x19	; 25
  c6:	68 2f       	mov	r22, r24
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	60 71       	andi	r22, 0x10	; 16
  cc:	70 70       	andi	r23, 0x00	; 0
	ms=PINA&0b00100000;   // mask PA5 bit of Port A
  ce:	89 b3       	in	r24, 0x19	; 25
  d0:	48 2f       	mov	r20, r24
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	40 72       	andi	r20, 0x20	; 32
  d6:	50 70       	andi	r21, 0x00	; 0
	s4=PINA&0b00001000;
  d8:	89 b3       	in	r24, 0x19	; 25
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 70       	andi	r24, 0x08	; 8
  de:	90 70       	andi	r25, 0x00	; 0



	 
	if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00000000) && (tp==2))     // if both sensors "off"
  e0:	e9 01       	movw	r28, r18
  e2:	c0 78       	andi	r28, 0x80	; 128
  e4:	d0 70       	andi	r29, 0x00	; 0
  e6:	27 fd       	sbrc	r18, 7
  e8:	24 c0       	rjmp	.+72     	; 0x132 <main+0xa0>
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	11 f5       	brne	.+68     	; 0x132 <main+0xa0>
  ee:	30 97       	sbiw	r30, 0x00	; 0
  f0:	a1 f4       	brne	.+40     	; 0x11a <main+0x88>
  f2:	61 15       	cp	r22, r1
  f4:	71 05       	cpc	r23, r1
  f6:	89 f4       	brne	.+34     	; 0x11a <main+0x88>
  f8:	41 15       	cp	r20, r1
  fa:	51 05       	cpc	r21, r1
  fc:	51 f4       	brne	.+20     	; 0x112 <main+0x80>
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b1 05       	cpc	r27, r1
 102:	11 f4       	brne	.+4      	; 0x108 <main+0x76>
		{
		PORTB=0b00001010;   // stop	
 104:	f8 ba       	out	0x18, r15	; 24
 106:	d7 cf       	rjmp	.-82     	; 0xb6 <main+0x24>
		}
		else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00000000) && (tp==1))     // if both sensors "off"
 108:	a1 30       	cpi	r26, 0x01	; 1
 10a:	b1 05       	cpc	r27, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0x80>
		{
		PORTB=0b00000101;   // stop	
 10e:	e8 ba       	out	0x18, r14	; 24
 110:	d2 cf       	rjmp	.-92     	; 0xb6 <main+0x24>
		else if((s5==0b10000000) && (s4==0b00010000) && (left_sensor==0b01000000) && (right_sensor==0b00001000) && (ms==0b00100000))     // if both sensors "off"
		{
		PORTB=0b00000000;   // stop	
		}

    else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00100000))     // if both sensors "on"
 112:	40 32       	cpi	r20, 0x20	; 32
 114:	51 05       	cpc	r21, r1
 116:	09 f4       	brne	.+2      	; 0x11a <main+0x88>
 118:	62 c0       	rjmp	.+196    	; 0x1de <main+0x14c>
		{
        PORTB=0b00001001;  // move straight
		}
			
	else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b01000000) && (right_sensor==0b00000000) && (ms==0b00100000)) 	// if left sensor off but right sensor on
 11a:	e0 34       	cpi	r30, 0x40	; 64
 11c:	f1 05       	cpc	r31, r1
 11e:	49 f4       	brne	.+18     	; 0x132 <main+0xa0>
 120:	61 15       	cp	r22, r1
 122:	71 05       	cpc	r23, r1
 124:	31 f4       	brne	.+12     	; 0x132 <main+0xa0>
 126:	40 32       	cpi	r20, 0x20	; 32
 128:	51 05       	cpc	r21, r1
 12a:	a1 f0       	breq	.+40     	; 0x154 <main+0xc2>
        {
		PORTB=0b00000001;
		tp=1; // turn left
        }
	else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b01000000) && (right_sensor==0b00000000) && (ms==0b00000000)) 	// if left sensor off but right sensor on
 12c:	41 15       	cp	r20, r1
 12e:	51 05       	cpc	r21, r1
 130:	89 f0       	breq	.+34     	; 0x154 <main+0xc2>
        {
		PORTB=0b00000001;
		tp=1; // turn left
        }
	
	else if((s5==0b10000000) && (s4==0b00000000) && (left_sensor==0b01000000) && (right_sensor==0b00000000) && (ms==0b00100000)) 	// if left sensor off but right sensor on
 132:	c0 38       	cpi	r28, 0x80	; 128
 134:	d1 05       	cpc	r29, r1
 136:	81 f4       	brne	.+32     	; 0x158 <main+0xc6>
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	a1 f5       	brne	.+104    	; 0x1a4 <main+0x112>
 13c:	e0 34       	cpi	r30, 0x40	; 64
 13e:	f1 05       	cpc	r31, r1
 140:	89 f5       	brne	.+98     	; 0x1a4 <main+0x112>
 142:	61 15       	cp	r22, r1
 144:	71 05       	cpc	r23, r1
 146:	71 f5       	brne	.+92     	; 0x1a4 <main+0x112>
 148:	40 32       	cpi	r20, 0x20	; 32
 14a:	51 05       	cpc	r21, r1
 14c:	19 f0       	breq	.+6      	; 0x154 <main+0xc2>
        {
		PORTB=0b00000001;
		tp=1; // turn left
        }
		else if((s5==0b10000000) && (s4==0b00000000) && (left_sensor==0b01000000) && (right_sensor==0b00000000) && (ms==0b00000000)) 	// if left sensor off but right sensor on
 14e:	41 15       	cp	r20, r1
 150:	51 05       	cpc	r21, r1
 152:	41 f5       	brne	.+80     	; 0x1a4 <main+0x112>
        {
		PORTB=0b00000001;
 154:	08 bb       	out	0x18, r16	; 24
 156:	32 c0       	rjmp	.+100    	; 0x1bc <main+0x12a>
		tp=1; // turn left
        }


	else if((s5==0b00000000) && (s4==0b00001000) && (left_sensor==0b00000000) && (right_sensor==0b00010000) && (ms==0b00100000))  ////if left sensor on but right sensor off
 158:	20 97       	sbiw	r28, 0x00	; 0
 15a:	21 f5       	brne	.+72     	; 0x1a4 <main+0x112>
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	91 05       	cpc	r25, r1
 160:	79 f4       	brne	.+30     	; 0x180 <main+0xee>
 162:	30 97       	sbiw	r30, 0x00	; 0
 164:	f9 f4       	brne	.+62     	; 0x1a4 <main+0x112>
 166:	60 31       	cpi	r22, 0x10	; 16
 168:	71 05       	cpc	r23, r1
 16a:	19 f4       	brne	.+6      	; 0x172 <main+0xe0>
 16c:	40 32       	cpi	r20, 0x20	; 32
 16e:	51 05       	cpc	r21, r1
 170:	b9 f0       	breq	.+46     	; 0x1a0 <main+0x10e>
        {
		PORTB=0b00001000;
		tp=2; // turn right
		}
	else if((s5==0b00000000) && (s4==0b00001000) && (left_sensor==0b00000000) && (right_sensor==0b00010000) && (ms==0b00000000))  ////if left sensor on but right sensor off
 172:	60 31       	cpi	r22, 0x10	; 16
 174:	71 05       	cpc	r23, r1
 176:	39 f5       	brne	.+78     	; 0x1c6 <main+0x134>
 178:	41 15       	cp	r20, r1
 17a:	51 05       	cpc	r21, r1
 17c:	21 f5       	brne	.+72     	; 0x1c6 <main+0x134>
 17e:	10 c0       	rjmp	.+32     	; 0x1a0 <main+0x10e>
        {
		PORTB=0b00001000;
		tp=2; // turn right
		}
	else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00010000) && (ms==0b00000000))
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	81 f4       	brne	.+32     	; 0x1a4 <main+0x112>
 184:	30 97       	sbiw	r30, 0x00	; 0
 186:	71 f4       	brne	.+28     	; 0x1a4 <main+0x112>
 188:	60 31       	cpi	r22, 0x10	; 16
 18a:	71 05       	cpc	r23, r1
 18c:	19 f4       	brne	.+6      	; 0x194 <main+0x102>
 18e:	41 15       	cp	r20, r1
 190:	51 05       	cpc	r21, r1
 192:	31 f0       	breq	.+12     	; 0x1a0 <main+0x10e>
		{
		PORTB=0b00001000;
		tp=2;  //TURN RYT
		} 
	
	else if((s5==0b00000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00010000) && (ms==0b00100000))
 194:	60 31       	cpi	r22, 0x10	; 16
 196:	71 05       	cpc	r23, r1
 198:	29 f4       	brne	.+10     	; 0x1a4 <main+0x112>
 19a:	40 32       	cpi	r20, 0x20	; 32
 19c:	51 05       	cpc	r21, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <main+0x112>
		{
		PORTB=0b00001000;
 1a0:	18 bb       	out	0x18, r17	; 24
 1a2:	1a c0       	rjmp	.+52     	; 0x1d8 <main+0x146>
		tp=2;  //TURN RYT
		}
		 
	else if((s5==0b10000000) && (s4==0b00000000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00000000))  ////if left sensor on but right sensor off
 1a4:	c0 38       	cpi	r28, 0x80	; 128
 1a6:	d1 05       	cpc	r29, r1
 1a8:	61 f4       	brne	.+24     	; 0x1c2 <main+0x130>
 1aa:	89 2b       	or	r24, r25
 1ac:	c1 f4       	brne	.+48     	; 0x1de <main+0x14c>
 1ae:	ef 2b       	or	r30, r31
 1b0:	b1 f4       	brne	.+44     	; 0x1de <main+0x14c>
 1b2:	67 2b       	or	r22, r23
 1b4:	a1 f4       	brne	.+40     	; 0x1de <main+0x14c>
 1b6:	45 2b       	or	r20, r21
 1b8:	91 f4       	brne	.+36     	; 0x1de <main+0x14c>
        {
		PORTB=0b00000101;
 1ba:	e8 ba       	out	0x18, r14	; 24
 1bc:	a1 e0       	ldi	r26, 0x01	; 1
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	7a cf       	rjmp	.-268    	; 0xb6 <main+0x24>
		tp=1; // turn  sharp 
		}
	else if((s5==0b00000000) && (s4==0b00001000) && (left_sensor==0b00000000) && (right_sensor==0b00000000) && (ms==0b00000000))  ////if left sensor on but right sensor off
 1c2:	cd 2b       	or	r28, r29
 1c4:	61 f4       	brne	.+24     	; 0x1de <main+0x14c>
 1c6:	08 97       	sbiw	r24, 0x08	; 8
 1c8:	51 f4       	brne	.+20     	; 0x1de <main+0x14c>
 1ca:	ef 2b       	or	r30, r31
 1cc:	41 f4       	brne	.+16     	; 0x1de <main+0x14c>
 1ce:	67 2b       	or	r22, r23
 1d0:	31 f4       	brne	.+12     	; 0x1de <main+0x14c>
 1d2:	45 2b       	or	r20, r21
 1d4:	21 f4       	brne	.+8      	; 0x1de <main+0x14c>
        {
		PORTB=0b00001010;
 1d6:	f8 ba       	out	0x18, r15	; 24
 1d8:	a2 e0       	ldi	r26, 0x02	; 2
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	6c cf       	rjmp	.-296    	; 0xb6 <main+0x24>
		tp=2; // turn sharp 
		}
		else
		{
		PORTB=0b00001001;
 1de:	d8 ba       	out	0x18, r13	; 24
 1e0:	6a cf       	rjmp	.-300    	; 0xb6 <main+0x24>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
